# SPDX-FileCopyrightText: 2023 Klar√§lvdalens Datakonsult AB, a KDAB Group company <info@kdab.com>
#
# SPDX-License-Identifier: LGPL-2.1-only OR LicenseRef-KDAB-KDStateMachineEditor

name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          # - ubuntu-latest
          - windows-latest
          # - macos-latest
        build_type:
          - Debug
          # - Release
        config:
          - qt_version: 5.15.2
            qt_arch: win64_msvc2019_64
          - qt_version: 6.6.2
            qt_modules: qtscxml
            qt_arch: win64_msvc2019_64

    steps:
      - name: Install Dependencies on Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt update -qq
          sudo apt install -y doxygen libgtk2.0-dev

      - name: Install Dependencies on macOS
        if: ${{ runner.os == 'macOS' }}
        run: |
            brew install bison
            echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH

      - name: Install Qt ${{ matrix.config.qt_version }} with options and default aqtversion (Linux/macOS)
        if: ${{ runner.os != 'Windows' }}
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: null # use whatever the default is
          modules: ${{ matrix.config.qt_modules }}
          version: ${{ matrix.config.qt_version }}
          cache: true

      - name: Install Qt with options and default aqtversion (Windows)
        if: ${{ runner.os == 'Windows' }}
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: null # use whatever the default is
          modules: ${{ matrix.config.qt_modules }}
          version: ${{ matrix.config.qt_version }}
          arch: ${{ matrix.config.qt_arch }}
          cache: true

      - name: Install ninja-build tool (must be after Qt due PATH changes)
        uses: turtlesec-no/get-ninja@main

      - uses: TheMrMilchmann/setup-msvc-dev@v3
        if: ${{ runner.os == 'Windows' }}
        with:
          arch: x64

      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Configure project (Linux/macOS)
        if: ${{ runner.os != 'Windows' }}
        run: >
          cmake -S . -B ./build -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DBUILD_QT6=${{ startsWith(matrix.config.qt_version, '6.') }}
          -DBUILD_TESTS=${{ matrix.build_type == 'Debug' }}
          -DBUILD_EXAMPLES=ON
          -DBUILD_DOCS=${{ matrix.build_type == 'Debug' && runner.os == 'Linux' }}
          -DWITH_INTERNAL_GRAPHVIZ=ON

      - name: Configure project (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: >
            cmake -S . -B ./build -G Ninja
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
            -DBUILD_QT6=${{ startsWith(matrix.config.qt_version, '6.') }}
            -DBUILD_TESTS=${{ matrix.build_type == 'Debug' }}
            -DBUILD_EXAMPLES=ON
            -DBUILD_DOCS=${{ matrix.build_type == 'Debug' && runner.os == 'Linux' }}
            -DWITH_INTERNAL_GRAPHVIZ=ON
            -DCMAKE_PREFIX_PATH="${{github.workspace}}/3rdparty/graphviz/windows/dependencies/libraries"
            -DCMAKE_PROGRAM_PATH="${{github.workspace}}/3rdparty/graphviz/windows/dependencies/graphviz-build-utilities"
            -DBISON_EXECUTABLE="${{github.workspace}}/3rdparty/graphviz/windows/dependencies/graphviz-build-utilities/winflexbison/win_bison.exe"
            -DFLEX_EXECUTABLE="${{github.workspace}}/3rdparty/graphviz/windows/dependencies/graphviz-build-utilities/winflexbison/win_flex.exe"

      - name: Build Project
        run: cmake --build ./build

      - name: Run tests on Linux (offscreen)
        if: ${{ matrix.build_type == 'Debug' && runner.os == 'Linux' }}
        run: ctest --test-dir ./build -C ${{ matrix.build_type }} --output-on-failure
        env:
          QT_QPA_PLATFORM: offscreen

      - name: Run tests on Windown/macOS
        if: ${{ matrix.build_type == 'Debug' && runner.os != 'Linux' }}
        run: ctest --test-dir ./build -C ${{ matrix.build_type }} --output-on-failure

      - name: Check DLL Dependencies
        if: ${{ failure() && runner.os == 'Windows' }}
        run: |
          ls build
          ls build\bin
          dumpbin /DEPENDENTS build\bin\test_commands.exe

      - name: Read tests log when it fails
        uses: andstor/file-reader-action@v1
        if: ${{ failure() && matrix.build_type == 'Debug' }}
        with:
          path: "./build/Testing/Temporary/LastTest.log"
